// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test lohhla

nextflow_process {

    name "Test Process LOHHLA"
    script "../main.nf"
    process "LOHHLA"

    tag "modules"
    tag "modules_nfcore"
    tag "lohhla"
    tag "polysolver"
    tag "facets"
    tag "snppileup"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used

    // TODO nf-core: If you are created a test for a chained module
    // (the module requires running more than one process to generate the required output)
    // add the 'setup' method here.
    // You can find more information about how to use a 'setup' method in the docs (https://nf-co.re/docs/contributing/modules#steps-for-creating-nf-test-for-chained-modules).
    test("homo_sapiens - bam") {
        setup {
            run("SNPPILEUP") {
                script "../../snppileup/main.nf"
                config "../../snppileup/tests/nextflow.config"
                process {
                    """
                        meta = [ id:'test' ] // meta map
                        input[0] = [ meta,
                                    file(params.test_data_mskcc['hla_bams']['test_hlaregion_bam'], checkIfExists: true),
                                    file(params.test_data_mskcc['hla_bams']['test_hlaregion_bam_bai'], checkIfExists: true),
                                    file(params.test_data_mskcc['hla_bams']['test_tumor_hlaregion_bam'], checkIfExists: true),
                                    file(params.test_data_mskcc['hla_bams']['test_tumor_hlaregion_bam_bai'], checkIfExists: true)
                                    ]
                        input[1] = [
                                        meta,
                                        file(params.test_data_mskcc['hla_bams']['dbsnp_hla_chr_vcf_gz'], checkIfExists: true),
                                        file(params.test_data_mskcc['hla_bams']['dbsnp_hla_chr_vcf_gz_tbi'], checkIfExists: true)
                                ]
                    """
                }
            }
                
            run("FACETS") {
                script "../../facets/main.nf"
                config "../../facets/tests/nextflow.config"
                process {
                    """                
                    meta = [ id:'test' ] // meta map
                    input[0] = SNPPILEUP.out.pileup.collect{ meta, pileup -> pileup }.map{ pileup -> [meta, pileup]}             

                    """
                }
            }

            run("POLYSOLVER") {
                script "../../polysolver/main.nf"
                process {
                    """
                    input[0] = [[ id:'test_hla_normal', single_end:false ], file(params.test_data_mskcc['hla_bams']['test_hlaregion_bam'], checkIfExists: true)]
                    input[1] = []
                    input[2] = []
                    input[3] = []
                    input[4] = []
                    
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [[ id:'test_hla_tumor', single_end:false ], 
                            file(params.test_data_mskcc['hla_bams']['test_tumor_hlaregion_bam'], checkIfExists: true)]
                input[1] = [[ id:'test_hla_normal', single_end:false ],
                              file(params.test_data_mskcc['hla_bams']['test_hlaregion_bam'], checkIfExists: true)]
                input[2] = POLYSOLVER.out.hla
                input[3] = FACETS.out.purity_out
                
                """

                
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }
                
    }

}
