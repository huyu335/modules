// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core subworkflows test traceback
nextflow_workflow {

    name "Test Subworkflow TRACEBACK"
    script "../main.nf"
    workflow "TRACEBACK"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/traceback"
    // TODO nf-core: Add tags for all modules used within this subworkflow. Example:
    tag "samtools"
    tag "samtools/sort"
    tag "samtools/index"


    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("sarscov2 - bam - single_end") {

        when {
            workflow {
                """
                // TODO nf-core: define inputs of the workflow here. Example:

                input[0] = Channel.of(
                    [[id:'s_C_FWD2FT_X009_d', patient: null],
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/s_C_FWD2FT_X009_d.rg.md.abra.printreads.bam'), 
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/s_C_FWD2FT_X009_d.rg.md.abra.printreads.bam.bai'), 
                        [], [], [], []
                    ],
                    [[id:'s_C_FWD2FT_X008_d', patient: null],
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/s_C_FWD2FT_X009_d.rg.md.abra.printreads.bam'), 
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/s_C_FWD2FT_X009_d.rg.md.abra.printreads.bam.bai'), 
                        [], [], [], []
                    ],
                    [[id:'C-8LCJE9-M001-d', patient:null], [], [],
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/C-8LCJE9-M001-d_cl_aln_srt_MD_IR_FX_BR__aln_srt_IR_FX-duplex.bam'),
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/C-8LCJE9-M001-d_cl_aln_srt_MD_IR_FX_BR__aln_srt_IR_FX-duplex.bam.bai'), 
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/C-8LCJE9-M001-d_cl_aln_srt_MD_IR_FX_BR__aln_srt_IR_FX-simplex.bam'),
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/C-8LCJE9-M001-d_cl_aln_srt_MD_IR_FX_BR__aln_srt_IR_FX-simplex.bam.bai')
                    ])

                input[1] = Channel.of([
                    [patient: null], 
                    [file('/Users/ebuehler/Downloads/traceback_test/test_data/s_C_FWD2FT_X009_d_data_mutations.txt'),
                    file('/Users/ebuehler/Downloads/traceback_test/test_data/s_C_FWD2FT_X009_d_data_mutations_copy.txt'),
                    file('/Users/ebuehler/Downloads/traceback_test/test_data/C-8LCJE9-M001-d.DONOR22-TP.combined-variants.vep_keptrmv_taggedHotspots_fillout_filtered.maf'),
                    file('/Users/ebuehler/Downloads/traceback_test/test_data/P-0038647-T04-IM6_data_mutations.txt')]
                    ])
                input[2] = Channel.of([
                    file('/Users/ebuehler/Downloads/traceback_test/Homo_sapiens_assembly19.fasta')
                ])
                input[3] = Channel.of([
                    file('/Users/ebuehler/Downloads/traceback_test/Homo_sapiens_assembly19.fasta.fai')
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }
    }
}
