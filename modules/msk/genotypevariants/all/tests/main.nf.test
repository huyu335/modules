// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test genotypevariants/all
nextflow_process {

    name "Test Process GENOTYPEVARIANTS_ALL"
    script "../main.nf"
    process "GENOTYPEVARIANTS_ALL"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "genotypevariants"
    tag "genotypevariants/all"


    test("sarscov2 - bam, msk - maf") {
        when {
            process {
                """
                input[0] = [
                            [ id:'test', sample:'197', patient:'c-id'], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam'], checkIfExists: true),
                            file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam_bai'], checkIfExists: true)
                        ]
                input[1] = file(params.test_data_msk['bams']['chr22maf'], checkIfExists: true)
                input[2] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                input[3] = file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - bam - stub") {

        config './nextflow.config'
        options "-stub"

        when {
            process {
                """
                input[0] = [
                            [ id:'test', sample:'197', patient:'c-id'], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam'], checkIfExists: true),
                            file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam_bai'], checkIfExists: true)
                        ]
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
