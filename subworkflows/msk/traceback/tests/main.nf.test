// nf-core subworkflows test traceback
nextflow_workflow {

    name "Test Subworkflow TRACEBACK"
    script "../main.nf"
    workflow "TRACEBACK"
    config "./nextflow.config"
    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows_msk"
    tag "subworkflows/traceback"
    tag "genotypevariants/all"
    tag "pvmaf/concat"
    tag "pvmaf/tag"
    

        test("sarscov2 - bam - single_end") {

        when {
            workflow {
                """
                // TODO nf-core: define inputs of the workflow here. Example:

                input[0] = Channel.of(
                    [[id:'s_C_FWD2FT_X009_d', patient: 'test1'],
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/s_C_FWD2FT_X009_d.rg.md.abra.printreads.bam'), 
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/s_C_FWD2FT_X009_d.rg.md.abra.printreads.bam.bai'), 
                        [], [], [], []
                    ],
                    [[id:'s_C_FWD2FT_X008_d', patient: 'test1'],
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/s_C_FWD2FT_X009_d.rg.md.abra.printreads.bam'), 
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/s_C_FWD2FT_X009_d.rg.md.abra.printreads.bam.bai'), 
                        [], [], [], []
                    ],
                    [[id:'P-0038647-T04-IM6', patient: 'test2'],
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/NK237840-T.bam'), 
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/NK237840-T.bam.bai'), 
                        [], [], [], []
                    ],
                    [[id:'C-8LCJE9-M001-d', patient:'test3'], [], [],
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/C-8LCJE9-M001-d_cl_aln_srt_MD_IR_FX_BR__aln_srt_IR_FX-duplex.bam'),
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/C-8LCJE9-M001-d_cl_aln_srt_MD_IR_FX_BR__aln_srt_IR_FX-duplex.bam.bai'), 
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/C-8LCJE9-M001-d_cl_aln_srt_MD_IR_FX_BR__aln_srt_IR_FX-simplex.bam'),
                        file('/Users/ebuehler/Downloads/traceback_test/test_data/C-8LCJE9-M001-d_cl_aln_srt_MD_IR_FX_BR__aln_srt_IR_FX-simplex.bam.bai')
                    ])

                input[1] = Channel.of(
                    [[patient: 'test1'], 
                    [file('/Users/ebuehler/Downloads/traceback_test/test_data/s_C_FWD2FT_X009_d_data_mutations.txt'),
                     file('/Users/ebuehler/Downloads/traceback_test/test_data/s_C_FWD2FT_X009_d_data_mutations_copy.txt')
                    ]
                    ],
                    [[patient: 'test2'], 
                    file('/Users/ebuehler/Downloads/traceback_test/test_data/C-8LCJE9-M001-d.DONOR22-TP.combined-variants.vep_keptrmv_taggedHotspots_fillout_filtered.maf')
                    ],
                    [[patient: 'test3'],
                    file('/Users/ebuehler/Downloads/traceback_test/test_data/P-0038647-T04-IM6_data_mutations.txt')
                    ])
                input[2] = [initial: file('/Users/ebuehler/Documents/GitHub/traceback/assets/maf_header.txt'), genotype: file('/Users/ebuehler/Documents/GitHub/traceback/assets/maf_header_genotype.txt')]
                input[3] = file('/Users/ebuehler/Downloads/traceback_test/Homo_sapiens_assembly19.fasta')
                input[4] = file('/Users/ebuehler/Downloads/traceback_test/Homo_sapiens_assembly19.fasta.fai')
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }
    }
    
    test("standard and access bams - stub") {
        options "-stub"
        when {
            workflow {
                """
                input[0] = Channel.of(
                    [[id:'sample1', patient: 'patient1'],
                        file('sample1.bam'), 
                        file('sample1.bam.bai'), 
                        [], [], [], []
                    ],
                    [[id:'sample2', patient:'patient2'], [], [],
                        file('sample2-duplex.bam'),
                        file('sample2-duplex.bam.bai'), 
                        file('sample2-simplex.bam'),
                        file('sample2-simplex.bam.bai')
                    ])

                input[1] = Channel.of(
                    [[patient: 'patient1'], 
                    [file('patient1.txt'),]
                    ],
                    [[patient: 'patient2'], 
                    [file('patient2.maf'),]]
                    )
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }
}
