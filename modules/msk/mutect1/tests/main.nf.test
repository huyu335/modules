// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test mutect1
nextflow_process {

    name "Test Process MUTECT1"
    script "../main.nf"
    process "MUTECT1"

    tag "mutect1"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("normal_tumor") {

        // TODO nf-core: If you are created a test for a chained module
        // (the module requires running more than one process to generate the required output)
        // add the 'setup' method here.
        // You can find more information about how to use a 'setup' method in the docs (https://nf-co.re/docs/contributing/modules#steps-for-creating-nf-test-for-chained-modules).

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:
                
                input[0] = [
                    'tumor', 
                    'normal',
                    file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_single_end_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true)
                    ]

                input[1] = [
                    file(params.test_data['sarscov2']['genome']['test_bed'], checkIfExists: true),
                    file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['sarscov2']['genome']['genome_fasta_fai'], checkIfExists: true),
                    file(params.test_data['sarscov2']['genome']['genome_dict'], checkIfExists: true)
                    ]
                """
            }
        }



        then {
            assertAll(
                { assert process.success }
            )
        }

    }

}